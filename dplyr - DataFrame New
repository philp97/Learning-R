# Deixando o código mais limpo e simples com PIPE
artists <- artists %>%
  select(-country,-year_founded,-albums)
artists <- artists %>%
  filter(spotify_monthly_listeners > 20000000, genre != 'Hip Hop')
artists <- artists %>%
  arrange(desc(youtube_subscribers))
head(artists)
--------------------------------------------------------------------------------------------------

# Piping

The pipe operator, or %>%, helps increase the readability of data frame code by piping the value on its left into the first argument of the function that follows it.
df %>%
  head()
  pipes the data frame df into the first argument of head(), becoming
  head(df)
# Ex
artists %>%
  head()

O pipe tira a necessidade de informar qual o arquivo em todas as situações
--------------------------------------------------------------------------------------------------

# Select()

Seleciona a/as colunas quer quer
# Ex - para uma arquivo df com colunas a, b, c
select(df, a, b)

# Usando o Pipe
df %>%
  select(a,b)
  
  ------------------------------------------------------------------------------------------------
> # Removendo colunas
> # Dizendo que não queremos a coluna rotation
> my_df %>%
+ select(-rotation) -> new_my_df
> new_my_df
     name               type diameter rings
1 Mercury Terrestrial planet    0.382 FALSE
2   Venus Terrestrial planet    0.949 FALSE
3   Earth Terrestrial planet    1.000 FALSE
4    Mars Terrestrial planet    0.532 FALSE
5 Jupiter          Gas giant   11.209  TRUE
6  Saturn          Gas giant    9.449  TRUE
7  Uranus          Gas giant    4.007  TRUE
8 Neptune          Gas giant    3.883  TRUE
------------------------------------------------------------------------------------------------

# Filtros - filter()
# Pode funcionar para 1 filtro
orders %>%
  filter(first_name == 'Joyce')
# 2 ou mais filtros - a virgula é como um &
orders %>%
  filter(shoe_material == 'faux-leather',price > 25)
# Retorna um df, com esses filtros

# Syntax
rock_groups <- artists %>%
  filter(genre =='Rock')  
rock_groups

# Filtro com OR - |
orders %>%
  filter(shoe_type == 'clogs' | price < 20)

# Filtro excluindo - !
orders %>%
  filter(!(shoe_color == red))
# Sapatos diferentes de red
------------------------------------------------------------------------------------------------

# Organizando o DF
# Usando a função arrange()
# Organizando pelo nome ascendente
customers %>%
  arrange(name)
# Organizando pelo nome descendente
customers %>%
  arrange(desc(age))
------------------------------------------------------------------------------------------------

# Adiocionando uma coluna com base me outra MUTATE()
df %>%
  mutate(sales_tax = price * 0.075)

# Adicionando mais de 1 coluna
df %>%
  mutate(profit = price - cost_to_manufacture,
         in_stock = TRUE)
         
# Quando não queremos manter as colunas anteriores usamos o transmute()
# Para 2 colunas
df %>%
  transmute(sales_tax = price * 0.075,
            profit = price - cost_to_manufacture)
------------------------------------------------------------------------------------------------
 
# Renomeando colunas

df %>%
  rename(Nome_que_eu_quero = Nome_original,
         author = written_by)
------------------------------------------------------------------------------------------------

# Dividindo um dado - str_sub()
# Ex - data = MMDDAAAA -> 11011993 - Podemos dividir para ano mês dia
# Criando uma coluna com os dados separados
# Create the 'month' column - começa no index 1 e termina no 2
df %>%
  mutate(month = str_sub(birthday,1,2))
 
# Create the 'day' column
df %>%
  mutate(day = str_sub(birthday,3,4))
 
# Create the 'year' column
df %>%
  mutate(year = str_sub(birthday,5))

 # Dividindo por caracteres        
# Create the 'user_type' and 'country' columns
df %>%
  separate(colunapraseparar,c('novacol1','novacol2'),'_') -> no fim, o separador '_'

# Remover caracteres
students <- students %>%
  mutate(score=gsub('%','',score))
students

# Mudando dado para numerico
students <- students %>%
  mutate(score=as.numeric(score))
students

# Valores NA - na.rm = TRUE
pricey_shoes <- orders %>%
  group_by(shoe_type) %>%
  summarize(max_price = max(price, na.rm=TRUE))
 
# Contando o número de linhas -> 
ano_2016 %>%
+ summarise(count = n()) 

shoes_sold <- orders %>%
  group_by(shoe_type) %>%
  summarize(count = n())

# Mostra o número de shoe_type que aparecem mais de 16 vezes
most_pop_orders<- orders %>%
 group_by(shoe_type) %>%
 filter(n()>16)
 
 









 
 
